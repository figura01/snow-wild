services:
  backend:
    build: ./backend
    command: sh -c "npm run resetDb && npm run start"
    ports:
      - 4000:4000
    # expose:
    #   - 4000
    volumes:
      - ./backend/src:/app/src
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://backend:4000/graphql?query=%7B__typename%7D -H 'Apollo-Require-Preflight: true' || exit 1",
        ]
      interval: 10s
      timeout: 30s
      retries: 5
    environment:
      - WDS_SOCKET_HOST=127.0.0.1
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NEXT_PUBLIC_IMAGE_URL=http://localhost:8000
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
  frontend:
    build: ./frontend
    ports:
      - 3000:3000
    volumes:
      - ./frontend/src:/app/src
    environment:
      - WDS_SOCKET_HOST=127.0.0.1
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NEXT_PUBLIC_IMAGE_URL=http://localhost:8000
    env_file:
      - ./frontend/.env
  db:
    image: postgres:15
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d snowwild -U postgres"]
      interval: 5s
      timeout: 40s
      retries: 15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: snowwild
    ports:
      - 5432:5432
    volumes:
      - snowwild-data:/var/lib/postgresql/data
  adminer:
    image: adminer
    depends_on:
      - db
    restart: always
    ports:
      - 8080:8080
  images:
    build: ./images
    volumes:
      - ./images/src:/app/src
      - ./images/uploads:/app/uploads
    ports:
      - 8000:8000
    environment:
      - WDS_SOCKET_HOST=127.0.0.1
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true

volumes:
  snowwild-data:
  images-data: